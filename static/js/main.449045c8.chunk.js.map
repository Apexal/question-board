{"version":3,"sources":["components/QuestionBoardCell.tsx","components/QuestionBoard.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["QuestionBoardCell","questionPosition","question","isRevealed","handleSelect","questionLevel","questionIndex","className","onClick","questionText","QuestionBoard","title","categories","rowCount","reduce","maxRow","cat","Math","max","questions","length","useState","categoryIndex","selectedQuestionPosition","setSelectedQuestionPosition","hasQuestionSelected","selectedQuestion","revealedQuestionPositions","setRevealedQuestionPositions","isQuestionRevealed","undefined","find","qp","questionIndices","Array","from","keys","selectAndRevealQuestion","isCardFlipped","setIsCardFlipped","answerText","map","categoryIindex","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6QA8BeA,MAnBf,YAAkH,IAArFC,EAAoF,EAApFA,iBAAkBC,EAAkE,EAAlEA,SAAUC,EAAwD,EAAxDA,WAAYC,EAA4C,EAA5CA,aAC7DC,EAAgBJ,EAAiBK,cAAgB,EAEvD,OACE,qBAAIC,UAAS,oCAA+BF,EAA/B,YAAgDF,EAAa,cAAgB,IAAMK,QAAS,kBAAMJ,EAAaH,IAA5H,WACIE,GACA,yCACSE,KAGVF,GACC,8BACGD,EAASO,mB,MC6ELC,MA1Ff,YAAuE,IAA9CC,EAA6C,EAA7CA,MAAOC,EAAsC,EAAtCA,WAExBC,EAAWD,EAAWE,QAAO,SAACC,EAAQC,GAAT,OAAiBC,KAAKC,IAAIH,EAAQC,EAAIG,UAAUC,UAAS,GAFxB,EAIJC,mBAA2B,CACzFC,eAAgB,EAChBhB,eAAgB,IANkD,mBAI7DiB,EAJ6D,KAInCC,EAJmC,KAQ9DC,GAAkE,IAA5CF,EAAyBD,gBAAoE,IAA5CC,EAAyBjB,cAChGoB,EAAoCD,EAAsBb,EAAWW,EAAyBD,eAAeH,UAAUI,EAAyBjB,eAAiB,KATnG,EAWFe,mBAA6B,IAX3B,mBAW7DM,EAX6D,KAWlCC,EAXkC,KAY9DC,EAAqB,SAAC,GAAD,IAAGP,EAAH,EAAGA,cAAehB,EAAlB,EAAkBA,cAAlB,YAA2KwB,IAAnHH,EAA0BI,MAAK,SAAAC,GAAE,OAAIA,EAAGV,gBAAkBA,GAAiBU,EAAG1B,gBAAkBA,MAE7K2B,EAAkBC,MAAMC,KAAKD,MAAMrB,GAAUuB,QAEnD,SAASC,EAAwBpC,GAC1B4B,EAAmB5B,IACtB2B,EAA6B,GAAD,mBAAKD,GAAL,CAAgC1B,KAG9DuB,EAA4BvB,GArBsC,MA6B1BoB,oBAAkB,GA7BQ,mBA6B7DiB,EA7B6D,KA6B9CC,EA7B8C,KA+BpE,OACE,sBAAKhC,UAAU,iBAAf,UACE,oBAAIA,UAAU,uBAAd,SAAsCI,IACrCc,GAEG,sBAAKlB,UAAS,wBAAmB+B,EAAgB,UAAY,IAA7D,UACE,sBAAK/B,UAAU,sBAAf,UACE,sBAAKA,UAAU,sBAAf,UACE,0CACA,mBAAGA,UAAU,wBAAb,gBACGmB,QADH,IACGA,OADH,EACGA,EAAkBjB,eAGrB,wBAAQD,QAAS,kBAAM+B,GAAiB,IAAxC,4BAEF,sBAAKhC,UAAU,qBAAf,UACE,wCACA,mBAAGA,UAAU,wBAAb,gBACGmB,QADH,IACGA,OADH,EACGA,EAAkBc,aAErB,wBAAQhC,QAAS,kBAAM+B,GAAiB,IAAxC,yBACA,wBAAQ/B,QA5BtB,WACEgB,EAA4B,CAAElB,eAAgB,EAAGgB,eAAgB,IACjEiB,GAAiB,IA0BL,wBAGJ,4BAMJd,GAEE,kCACE,gCACE,6BACGb,EAAW6B,KAAI,SAACzB,EAAK0B,GAAN,OAAyB,6BAA0B1B,EAAIL,OAArB+B,UAGtD,gCACGT,EAAgBQ,KAAI,SAAAnC,GAAa,OAChC,6BACGM,EAAW6B,KAAI,SAACzB,EAAKM,GAAN,OACd,cAAC,EAAD,CAEErB,iBAAkB,CAAEqB,gBAAehB,iBACnCJ,SAAUc,EAAIG,UAAUb,GACxBH,WAAY0B,EAAmB,CAAEP,gBAAehB,kBAChDF,aAAciC,GAJTf,OAHFhB,eC5EnBM,EAAyB,CAC7B,CACED,MAAO,iBACPQ,UAAW,CACT,CACEV,aAAc,wCACd+B,WAAY,kCACZrC,YAAY,GAEd,CACEM,aAAc,qCACd+B,WAAY,WACZrC,YAAY,GAEd,CACEM,aAAc,wCACd+B,WAAY,kCACZrC,YAAY,GAEd,CACEM,aAAc,wCACd+B,WAAY,kCACZrC,YAAY,KAIlB,CACEQ,MAAO,cACPQ,UAAW,CACT,CACEV,aAAc,wCACd+B,WAAY,kCACZrC,YAAY,GAEd,CACEM,aAAc,qCACd+B,WAAY,WACZrC,YAAY,GAEd,CACEM,aAAc,wCACd+B,WAAY,kCACZrC,YAAY,GAEd,CACEM,aAAc,wCACd+B,WAAY,kCACZrC,YAAY,KAIlB,CACEQ,MAAO,cACPQ,UAAW,CACT,CACEV,aAAc,wCACd+B,WAAY,kCACZrC,YAAY,GAEd,CACEM,aAAc,qCACd+B,WAAY,WACZrC,YAAY,GAEd,CACEM,aAAc,wCACd+B,WAAY,kCACZrC,YAAY,GAEd,CACEM,aAAc,wCACd+B,WAAY,kCACZrC,YAAY,KAIlB,CACEQ,MAAO,cACPQ,UAAW,CACT,CACEV,aAAc,wCACd+B,WAAY,kCACZrC,YAAY,GAEd,CACEM,aAAc,qCACd+B,WAAY,WACZrC,YAAY,GAEd,CACEM,aAAc,wCACd+B,WAAY,kCACZrC,YAAY,GAEd,CACEM,aAAc,wCACd+B,WAAY,kCACZrC,YAAY,MAgBLwC,MAVf,WACE,OACE,qBAAKpC,UAAU,MAAf,SACE,+BACE,cAAC,EAAD,CAAeI,MAAM,wBAAwBC,WAAYA,SClGlDgC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.449045c8.chunk.js","sourcesContent":["import React from \"react\";\nimport { Question, QuestionPosition } from \"../services/game\";\n\nimport './QuestionBoardCell.css';\n\nexport type QuestionBoardCellPropTypes = {\n  questionPosition: QuestionPosition;\n  question: Question;\n  isRevealed: boolean;\n  handleSelect(questionPosition: QuestionPosition): void;\n};\nfunction QuestionBoardCell({ questionPosition, question, isRevealed, handleSelect }: QuestionBoardCellPropTypes) {\n  const questionLevel = questionPosition.questionIndex + 1;\n\n  return (\n    <td className={`question-board-cell level-${questionLevel} ${isRevealed ? 'is-revealed' : ''}`} onClick={() => handleSelect(questionPosition)}>\n      {!isRevealed && \n        <div>\n          Level {questionLevel}\n        </div>\n      }\n      {isRevealed &&\n        <div>\n          {question.questionText}\n        </div>\n      }\n    </td>\n  );\n}\n\nexport default QuestionBoardCell;\n","import React, { useState } from \"react\";\nimport { Category, Question, QuestionPosition } from \"../services/game\";\nimport QuestionBoardCell from \"./QuestionBoardCell\";\n\nimport './QuestionBoard.css'\n\nexport type QuestionBoardPropTypes = {\n  title: string;\n  categories: Category[];\n};\nfunction QuestionBoard({ title, categories }: QuestionBoardPropTypes) {\n  /** The number of rows in the question board. Might result in some empty cells if not all categories have the same number of questions. */\n  const rowCount = categories.reduce((maxRow, cat) => Math.max(maxRow, cat.questions.length), 0);\n\n  const [selectedQuestionPosition, setSelectedQuestionPosition] = useState<QuestionPosition>({\n    categoryIndex: -1,\n    questionIndex: -1\n  })\n  const hasQuestionSelected = selectedQuestionPosition.categoryIndex !== -1 && selectedQuestionPosition.questionIndex !== -1;\n  const selectedQuestion: Question | null = hasQuestionSelected ? categories[selectedQuestionPosition.categoryIndex].questions[selectedQuestionPosition.questionIndex] : null\n\n  const [revealedQuestionPositions, setRevealedQuestionPositions] = useState<QuestionPosition[]>([]);\n  const isQuestionRevealed = ({ categoryIndex, questionIndex }: QuestionPosition) => revealedQuestionPositions.find(qp => qp.categoryIndex === categoryIndex && qp.questionIndex === questionIndex) !== undefined\n\n  const questionIndices = Array.from(Array(rowCount).keys());\n\n  function selectAndRevealQuestion(questionPosition: QuestionPosition) {\n    if (!isQuestionRevealed(questionPosition)) {\n      setRevealedQuestionPositions([...revealedQuestionPositions, questionPosition])\n    }\n\n    setSelectedQuestionPosition(questionPosition)\n  }\n\n  function unselectQuestion() {\n    setSelectedQuestionPosition({ questionIndex: -1, categoryIndex: -1 })\n    setIsCardFlipped(false);\n  }\n\n  const [isCardFlipped, setIsCardFlipped] = useState<boolean>(false);\n\n  return (\n    <div className=\"question-board\">\n      <h1 className=\"question-board-title\">{title}</h1>\n      {hasQuestionSelected &&\n        (\n          <div className={`question-card ${isCardFlipped ? 'flipped' : ''}`}>\n            <div className=\"question-card-inner\">\n              <div className=\"question-card-front\">\n                <h6>Question</h6>\n                <p className=\"question-card-content\">\n                  {selectedQuestion?.questionText}\n                </p>\n\n                <button onClick={() => setIsCardFlipped(true)}>Show Answer</button>\n              </div>\n              <div className=\"question-card-back\">\n                <h6>Answer</h6>\n                <p className=\"question-card-content\">\n                  {selectedQuestion?.answerText}\n                </p>\n                <button onClick={() => setIsCardFlipped(false)}>Hide Answer</button>\n                <button onClick={unselectQuestion}>Back</button>\n              </div>\n            </div>\n            <div>\n            </div>\n            {/* <button onClick={() => setSelectedQuestionPosition({ questionIndex: -1, categoryIndex: -1 })}>Back</button> */}\n          </div>\n        )\n      }\n      {!hasQuestionSelected &&\n        (\n          <table>\n            <thead>\n              <tr>\n                {categories.map((cat, categoryIindex) => <th key={categoryIindex}>{cat.title}</th>)}\n              </tr>\n            </thead>\n            <tbody>\n              {questionIndices.map(questionIndex => (\n                <tr key={questionIndex}>\n                  {categories.map((cat, categoryIndex) =>\n                    <QuestionBoardCell\n                      key={categoryIndex}\n                      questionPosition={{ categoryIndex, questionIndex }}\n                      question={cat.questions[questionIndex]}\n                      isRevealed={isQuestionRevealed({ categoryIndex, questionIndex })}\n                      handleSelect={selectAndRevealQuestion}\n                    />\n                  )}\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        )}\n    </div>\n  );\n}\n\nexport default QuestionBoard;\n","import React from 'react';\nimport './App.css';\nimport QuestionBoard from './components/QuestionBoard';\nimport { Category } from './services/game';\n\nconst categories: Category[] = [\n  {\n    title: 'Parts of Atoms',\n    questions: [\n      {\n        questionText: 'Where are protons located in an atom?',\n        answerText: 'In the nucleus or in the center',\n        isRevealed: false\n      },\n      {\n        questionText: 'What is the charge of an electron?',\n        answerText: 'Negative',\n        isRevealed: false\n      },\n      {\n        questionText: 'Where are protons located in an atom?',\n        answerText: 'In the nucleus or in the center',\n        isRevealed: false\n      },\n      {\n        questionText: 'Where are protons located in an atom?',\n        answerText: 'In the nucleus or in the center',\n        isRevealed: false\n      }\n    ]\n  },\n  {\n    title: 'Other Thing',\n    questions: [\n      {\n        questionText: 'Where are protons located in an atom?',\n        answerText: 'In the nucleus or in the center',\n        isRevealed: false\n      },\n      {\n        questionText: 'What is the charge of an electron?',\n        answerText: 'Negative',\n        isRevealed: false\n      },\n      {\n        questionText: 'Where are protons located in an atom?',\n        answerText: 'In the nucleus or in the center',\n        isRevealed: false\n      },\n      {\n        questionText: 'Where are protons located in an atom?',\n        answerText: 'In the nucleus or in the center',\n        isRevealed: false\n      }\n    ]\n  },\n  {\n    title: 'Other Thing',\n    questions: [\n      {\n        questionText: 'Where are protons located in an atom?',\n        answerText: 'In the nucleus or in the center',\n        isRevealed: false\n      },\n      {\n        questionText: 'What is the charge of an electron?',\n        answerText: 'Negative',\n        isRevealed: false\n      },\n      {\n        questionText: 'Where are protons located in an atom?',\n        answerText: 'In the nucleus or in the center',\n        isRevealed: false\n      },\n      {\n        questionText: 'Where are protons located in an atom?',\n        answerText: 'In the nucleus or in the center',\n        isRevealed: false\n      }\n    ]\n  },\n  {\n    title: 'Other Thing',\n    questions: [\n      {\n        questionText: 'Where are protons located in an atom?',\n        answerText: 'In the nucleus or in the center',\n        isRevealed: false\n      },\n      {\n        questionText: 'What is the charge of an electron?',\n        answerText: 'Negative',\n        isRevealed: false\n      },\n      {\n        questionText: 'Where are protons located in an atom?',\n        answerText: 'In the nucleus or in the center',\n        isRevealed: false\n      },\n      {\n        questionText: 'Where are protons located in an atom?',\n        answerText: 'In the nucleus or in the center',\n        isRevealed: false\n      }\n    ]\n  },\n]\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <main>\n        <QuestionBoard title=\"Middle School Science\" categories={categories} />\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}